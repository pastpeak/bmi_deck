#' normal_prob_area_plot(-Inf, 2)
#' # standard normal with middle 68% shaded.
#' normal_prob_area_plot(-1, 1)
normal_prob_area_plot <- function(lb, ub, mean = 0, sd = 1, limits = c(mean - 3 * sd, mean + 3 * sd), diff=-3) {
x <- seq(limits[1], limits[2], length.out = 100)
xmin <- max(lb, limits[1])
xmax <- min(ub, limits[2])
areax <- seq(xmin, xmax, length.out = 100)
print(summary(areax))
area <- data.frame(x = areax, ymin = 0, ymax = dnorm(areax, mean = mean, sd = sd))
mean2 <- mean + diff
x2 <- x + diff
x2min <- xmin + diff
x2max <- xmax + diff
areax2 <- areax + diff
summary(areax2)
area2 <- data.frame(x = areax2, ymin = 0, ymax = dnorm(areax2, mean = mean2, sd = sd))
(ggplot()
+ geom_line(data.frame(x = x, y = dnorm(x, mean = mean, sd = sd)),
mapping = aes(x = x, y = y))
+ geom_line(data.frame(x = x2, y = dnorm(x2, mean = mean2, sd = sd)),
mapping = aes(x = x2, y = y))
+ geom_ribbon(data = area2, mapping = aes(x = x2, ymin = ymin, ymax = ymax, fill=I("grey")))
+ scale_x_continuous(limits = limits))
}
normal_prob_area_plot(-Inf,2)
#' Draw Normal Distribution Density with an area shaded in.
#'
#' @param lb Lower bound of the shaded area. Use \code{-Inf} for a left tail.
#' @param ub Upper bound of the shaded area. Use \code{Inf} for a right tail.
#' @param mean Mean of the normal distribution
#' @param sd Standard deviation of the normal distribution
#' @param limits Lower and upper bounds on the x-axis of the area displayed.
#' @return ggplot object.
#' @examples
#' # Standard normal with upper 2.5% tail shaded
#' normal_prob_area_plot(2, Inf)
#' # Standard normal with lower 2.5% tail shaded
#' normal_prob_area_plot(-Inf, 2)
#' # standard normal with middle 68% shaded.
#' normal_prob_area_plot(-1, 1)
normal_prob_area_plot <- function(lb, ub, mean = 0, sd = 1, limits = c(mean - 3 * sd, mean + 3 * sd), diff=-3) {
x <- seq(limits[1], limits[2], length.out = 100)
xmin <- max(lb, limits[1])
xmax <- min(ub, limits[2])
areax <- seq(xmin, xmax, length.out = 100)
print(summary(areax))
area <- data.frame(x = areax, ymin = 0, ymax = dnorm(areax, mean = mean, sd = sd))
mean2 <- mean + diff
x2 <- x + diff
x2min <- xmin + diff
x2max <- xmax + diff
areax2 <- areax + diff
print(summary(areax2))
area2 <- data.frame(x = areax2, ymin = 0, ymax = dnorm(areax2, mean = mean2, sd = sd))
(ggplot()
+ geom_line(data.frame(x = x, y = dnorm(x, mean = mean, sd = sd)),
mapping = aes(x = x, y = y))
+ geom_line(data.frame(x = x2, y = dnorm(x2, mean = mean2, sd = sd)),
mapping = aes(x = x2, y = y))
+ geom_ribbon(data = area2, mapping = aes(x = x2, ymin = ymin, ymax = ymax, fill=I("grey")))
+ scale_x_continuous(limits = limits))
}
normal_prob_area_plot(-Inf,2)
#' Draw Normal Distribution Density with an area shaded in.
#'
#' @param lb Lower bound of the shaded area. Use \code{-Inf} for a left tail.
#' @param ub Upper bound of the shaded area. Use \code{Inf} for a right tail.
#' @param mean Mean of the normal distribution
#' @param sd Standard deviation of the normal distribution
#' @param limits Lower and upper bounds on the x-axis of the area displayed.
#' @return ggplot object.
#' @examples
#' # Standard normal with upper 2.5% tail shaded
#' normal_prob_area_plot(2, Inf)
#' # Standard normal with lower 2.5% tail shaded
#' normal_prob_area_plot(-Inf, 2)
#' # standard normal with middle 68% shaded.
#' normal_prob_area_plot(-1, 1)
normal_prob_area_plot <- function(lb, ub, mean = 0, sd = 1, limits = c(mean - 3 * sd, mean + 3 * sd), diff=-3) {
x <- seq(limits[1], limits[2], length.out = 100)
xmin <- max(lb, limits[1])
xmax <- min(ub, limits[2])
print(c(xmin, xmax))
areax <- seq(xmin, xmax, length.out = 100)
print(summary(areax))
area <- data.frame(x = areax, ymin = 0, ymax = dnorm(areax, mean = mean, sd = sd))
mean2 <- mean + diff
x2 <- x + diff
x2min <- xmin + diff
x2max <- xmax + diff
areax2 <- areax + diff
print(summary(areax2))
area2 <- data.frame(x = areax2, ymin = 0, ymax = dnorm(areax2, mean = mean2, sd = sd))
(ggplot()
+ geom_line(data.frame(x = x, y = dnorm(x, mean = mean, sd = sd)),
mapping = aes(x = x, y = y))
+ geom_line(data.frame(x = x2, y = dnorm(x2, mean = mean2, sd = sd)),
mapping = aes(x = x2, y = y))
+ geom_ribbon(data = area2, mapping = aes(x = x2, ymin = ymin, ymax = ymax, fill=I("grey")))
+ scale_x_continuous(limits = limits))
}
normal_prob_area_plot(-Inf,2)
#' Draw Normal Distribution Density with an area shaded in.
#'
#' @param lb Lower bound of the shaded area. Use \code{-Inf} for a left tail.
#' @param ub Upper bound of the shaded area. Use \code{Inf} for a right tail.
#' @param mean Mean of the normal distribution
#' @param sd Standard deviation of the normal distribution
#' @param limits Lower and upper bounds on the x-axis of the area displayed.
#' @return ggplot object.
#' @examples
#' # Standard normal with upper 2.5% tail shaded
#' normal_prob_area_plot(2, Inf)
#' # Standard normal with lower 2.5% tail shaded
#' normal_prob_area_plot(-Inf, 2)
#' # standard normal with middle 68% shaded.
#' normal_prob_area_plot(-1, 1)
normal_prob_area_plot <- function(lb, ub, mean = 0, sd = 1, limits = c(mean - 3 * sd, mean + 3 * sd), diff=-3) {
x <- seq(limits[1], limits[2], length.out = 100)
xmin <- limits[1]
xmax <- limits[2]
print(c(xmin, xmax))
areax <- seq(xmin, xmax, length.out = 100)
print(summary(areax))
area <- data.frame(x = areax, ymin = 0, ymax = dnorm(areax, mean = mean, sd = sd))
mean2 <- mean + diff
x2 <- x + diff
x2min <- xmin + diff
x2max <- xmax + diff
areax2 <- areax + diff
print(summary(areax2))
area2 <- data.frame(x = areax2, ymin = 0, ymax = dnorm(areax2, mean = mean2, sd = sd))
(ggplot()
+ geom_line(data.frame(x = x, y = dnorm(x, mean = mean, sd = sd)),
mapping = aes(x = x, y = y))
+ geom_line(data.frame(x = x2, y = dnorm(x2, mean = mean2, sd = sd)),
mapping = aes(x = x2, y = y))
+ geom_ribbon(data = area2, mapping = aes(x = x2, ymin = ymin, ymax = ymax, fill=I("grey")))
+ scale_x_continuous(limits = limits))
}
normal_prob_area_plot(-Inf,2)
#' Draw Normal Distribution Density with an area shaded in.
#'
#' @param lb Lower bound of the shaded area. Use \code{-Inf} for a left tail.
#' @param ub Upper bound of the shaded area. Use \code{Inf} for a right tail.
#' @param mean Mean of the normal distribution
#' @param sd Standard deviation of the normal distribution
#' @param limits Lower and upper bounds on the x-axis of the area displayed.
#' @return ggplot object.
#' @examples
#' # Standard normal with upper 2.5% tail shaded
#' normal_prob_area_plot(2, Inf)
#' # Standard normal with lower 2.5% tail shaded
#' normal_prob_area_plot(-Inf, 2)
#' # standard normal with middle 68% shaded.
#' normal_prob_area_plot(-1, 1)
normal_prob_area_plot <- function(lb, ub, mean = 0, sd = 1, limits = c(mean - 3 * sd, mean + 3 * sd), diff=-3) {
x <- seq(limits[1], limits[2], length.out = 100)
xmin <- max(lb, limits[1])
xmax <- min(ub, limits[2])
print(c(xmin, xmax))
areax <- seq(xmin, xmax, length.out = 100)
print(summary(areax))
area <- data.frame(x = areax, ymin = 0, ymax = dnorm(areax, mean = mean, sd = sd))
mean2 <- mean + diff
x2 <- x + diff
x2min <- xmin + diff
x2max <- xmax + diff
areax2 <- areax + diff
print(summary(areax2))
area2 <- data.frame(x = areax2, ymin = 0, ymax = dnorm(areax2, mean = mean2, sd = sd))
(ggplot()
+ geom_line(data.frame(x = x, y = dnorm(x, mean = mean, sd = sd)),
mapping = aes(x = x, y = y))
+ geom_line(data.frame(x = x2, y = dnorm(x2, mean = mean2, sd = sd)),
mapping = aes(x = x2, y = y))
+ geom_ribbon(data = area2, mapping = aes(x = x2, ymin = ymin, ymax = ymax, fill=I("grey")))
+ scale_x_continuous(limits = limits))
}
normal_prob_area_plot(-Inf,2)
library(ggplot2)
library(MASS)
weights <- c(
# July 2016
222.2,219.4,219.6,217.4,218.4,218.4,217.4,218.4,
# August 2016
217.6,218.0,217.8,219.8,217.2,218.8,221.2,219.8,219.4,218.8,
219.2,217.0,216.4,NA,216.0,218.0,215.6,216.8,217.0,215.0,
219.4,218.8,219.2,217.4,215.2,213.8,213.8,NA,216.0,217.0
)
#weights <- as.ts(weights)
dates = seq(as.Date("2016-07-24"), by=1, len=length(weights))
df <- data.frame(weights,dates)
ggplot(df, aes(dates, weights)) +
geom_line(color="grey80") +
geom_point() +
geom_smooth(alpha=0.2, color="cornflowerblue") +
geom_smooth(method='lm', se=FALSE, color="red2") +
xlab("Date") +
ylab("Weight") +
ylim(210, NA)
source('~/Courses/weight_plot.R')
#' Draw Normal Distribution Density with an area shaded in.
#'
#' @param lb Lower bound of the shaded area. Use \code{-Inf} for a left tail.
#' @param ub Upper bound of the shaded area. Use \code{Inf} for a right tail.
#' @param mean Mean of the normal distribution
#' @param sd Standard deviation of the normal distribution
#' @param limits Lower and upper bounds on the x-axis of the area displayed.
#' @return ggplot object.
#' @examples
#' # Standard normal with upper 2.5% tail shaded
#' normal_prob_area_plot(2, Inf)
#' # Standard normal with lower 2.5% tail shaded
#' normal_prob_area_plot(-Inf, 2)
#' # standard normal with middle 68% shaded.
#' normal_prob_area_plot(-1, 1)
normal_prob_area_plot <- function(lb, ub, mean = 0, sd = 1, limits = c(mean - 3 * sd, mean + 3 * sd), diff=-3) {
x <- seq(limits[1], limits[2], length.out = 100)
xmin <- max(lb, limits[1])
xmax <- min(ub, limits[2])
print(c(xmin, xmax))
areax <- seq(xmin, xmax, length.out = 100)
print(summary(areax))
area <- data.frame(x = areax, ymin = 0, ymax = dnorm(areax, mean = mean, sd = sd))
mean2 <- mean + diff
x2 <- x + diff
x2min <- xmin + diff
x2max <- xmax + diff
areax2 <- areax + diff
print(summary(areax2))
area2 <- data.frame(x = areax2, ymin = 0, ymax = dnorm(areax2, mean = mean2, sd = sd))
(ggplot()
+ geom_line(data.frame(x = x, y = dnorm(x, mean = mean, sd = sd)),
mapping = aes(x = x, y = y))
+ geom_line(data.frame(x = x2, y = dnorm(x2, mean = mean2, sd = sd)),
mapping = aes(x = x2, y = y))
+ geom_ribbon(data = area2, mapping = aes(x = x2, ymin = ymin, ymax = ymax, fill=I("grey")))
+ scale_x_continuous(limits = limits))
}
normal_prob_area_plot(-Inf,2)
norm_samp <- rnorm(100)
qqnorm(norm_samp)
abline(a=0, b=1, col='grey')
norm_samp <- rnorm(100)
qqnorm(norm_samp)
abline(a=0, b=1, col='grey')
norm_samp <- rnorm(100)
qqnorm(norm_samp)
abline(a=0, b=1, col='grey')
norm_samp <- rnorm(1000)
qqnorm(norm_samp)
abline(a=0, b=1, col='grey')
norm_samp <- rnorm(1000)
qqnorm(norm_samp)
abline(a=0, b=1, col='grey')
norm_samp <- rnorm(1000)
qqnorm(norm_samp)
abline(a=0, b=1, col='grey')
norm_samp <- rnorm(10000)
qqnorm(norm_samp)
abline(a=0, b=1, col='grey')
norm_samp <- rnorm(10000)
qqnorm(norm_samp)
abline(a=0, b=1, col='grey')
norm_samp <- rnorm(100)
qqnorm(norm_samp)
abline(a=0, b=1, col='grey')
head(norm_samp)
head(sort(norm_samp))
tail(sort(norm_samp))
?which
which(norm_samp < -1.0)
which(norm_samp > 1.0)
which(norm_samp < -1.5)
small <- which(norm_samp < -1.5)
large <- which(norm_samp > 1.5)
norm_samp[small] <- norm_samp[small] - 0.5
norm_samp[large] <- norm_samp[large] + 0.5
qqnorm(norm_samp)
abline(a=0, b=1, col='grey')
norm_samp <- rnorm(1000)
small <- which(norm_samp < -1.5)
large <- which(norm_samp > 1.5)
norm_samp[small] <- norm_samp[small] - 0.5
norm_samp[large] <- norm_samp[large] + 0.5
qqnorm(norm_samp)
abline(a=0, b=1, col='grey')
?diff
diff(1:10, 2)
diff(c(1,3,7,13), 1)
diff(c(1,3,7,13), 2)
pbinom(0,200,0.02)
pbinom(2,200,0.02)
rpois(100,2)
rpois(100,1)
rpois(100,0.5)
rpois(100,0.1)
rpois(100,0.3)
rexpn(100,1)
rexp(100,1)
rexp(100,1,digits=1)
round(rexp(100,1),digits=1)
rweibull(100,1.5,5000)
rweibull(100,15,5000)
plot(rweibull(100,15,5000))
plot(rweibull(100,150,5000))
plot(rweibull(100,500,5000))
plot(rweibull(100,5000,5000))
?Weibull
plot(rweibull(1000,5000,5000))
plot(rweibull(1000,15000,5000))
plot(rweibull(1000,150000,5000))
plot(rweibull(1000,1500000,5000))
plot(rweibull(1000,1500,5000))
plot(rweibull(1000,15,5000))
library(ggplot2)
library(MASS)
weights <- c(
# July 2016
222.2,219.4,219.6,217.4,218.4,218.4,217.4,218.4,
# August 2016
217.6,218.0,217.8,219.8,217.2,218.8,221.2,219.8,219.4,218.8,
219.2,217.0,216.4,NA,216.0,218.0,215.6,216.8,217.0,215.0,
219.4,218.8,219.2,217.4,215.2,213.8,213.8,NA,216.0,217.0,
215.6
)
#weights <- as.ts(weights)
dates = seq(as.Date("2016-07-24"), by=1, len=length(weights))
df <- data.frame(weights,dates)
ggplot(df, aes(dates, weights)) +
geom_line(color="grey80") +
geom_point() +
geom_smooth(alpha=0.2, color="cornflowerblue") +
geom_smooth(method='lm', se=FALSE, color="red2") +
xlab("Date") +
ylab("Weight") +
ylim(210, NA)
source('~/Courses/weight_plot.R')
p_grid <- seq(from=0, to=1, length.out=1000)
head(p_grid, n=10)
prior <- rep(1, 1000)
# The likelihood is the probability of the data (6 successes in 9 trials) for each
#  of the proportions in the grid
likelihood <- dbinom(6, size=9, prob=p_grid)
head(likelihood, n=10)
max(likelihood)
max(prior)
posterior <- likelihood * prior
sum(posterior)
head(posterior, n=10)
max(posterior)
posterior <- posterior / sum(posterior)
max(posterior)
sum(posterior)
head(p_grid)
sum(dbinom(6, size=9, prob=p_grid))
sum(dbinom(5, size=9, prob=p_grid))
sum(dbinom(4, size=9, prob=p_grid))
sum(dbinom(4, size=9, prob=seq(from=0, to=1, length.out=100)))
sum(dbinom(4, size=9, prob=seq(from=0, to=1, length.out=10)))
sum(dbinom(4, size=8, prob=seq(from=0, to=1, length.out=10)))
sum(dbinom(4, size=8, prob=seq(from=0, to=1, length.out=100)))
sum(dbinom(4, size=8, prob=seq(from=0, to=1, length.out=1000)))
sum(dbinom(4, size=7, prob=seq(from=0, to=1, length.out=1000)))
sum(dbinom(4, size=7, prob=seq(from=0, to=1, length.out=100)))
sum(dbinom(4, size=7, prob=seq(from=0, to=1, length.out=10)))
library(ggplot2)
pos <- data.frame(x=replicate(1000, sum(runif(16, -1, 1))))
ggplot(aes(x=x)) + geom_density()
?data.frame
replicate(1000, sum(runif(16, -1, 1)))
class(replicate(1000, sum(runif(16, -1, 1))))
head(pos)
ggplot(data=pos, aes(x=x)) + geom_density()
ggplot(data=pos, aes(x=x)) + geom_density() + geom_line()
ggplot(data=pos, aes(x=x)) + geom_density() + geom_histogram()
ggplot(data=pos, aes(x=x)) + geom_density() +
geom_histogram(aes(color=grey))
ggplot(data=pos, aes(x=x)) + geom_density() +
geom_histogram(aes(color=I(grey)))
ggplot(data=pos, aes(x=x)) + geom_histogram(aes(color=I(grey)))
ggplot(data=pos, aes(x=x)) + geom_histogram(color=I(grey))
ggplot(data=pos, aes(x=x)) + geom_histogram()
ggplot(data=pos, aes(x=x)) + geom_histogram(color="gray90")
ggplot(data=pos, aes(x=x)) + geom_histogram(fill="gray90")
ggplot(data=pos, aes(x=x)) + geom_histogram(fill="gray80")
ggplot(data=pos, aes(x=x)) + geom_density() +
geom_histogram(fill="gray80")
ggplot(data=pos, aes(x=x)) +
geom_histogram(fill="gray80") +
geom_density()
ggplot(data=pos, aes(x=x)) +
#geom_histogram(fill="gray80") +
geom_density()
ggplot(data=pos, aes(x=x)) +
geom_histogram(fill="gray80") +
geom_density()
ggplot(data=pos, aes(x=x)) +
geom_histogram(fill="gray85") +
geom_density()
ggplot(data=pos, aes(x=x)) +
geom_histogram(fill="gray85") +
geom_smooth()
ggplot(data=pos, aes(x=x)) +
geom_histogram(fill="gray85") +
geom_line()
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85")
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85") +
geom_density()
```{r}
pos <- data.frame(x=replicate(10000, sum(runif(32, -1, 1))))
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85") +
geom_density()
```
pos <- data.frame(x=replicate(10000, sum(runif(100, -1, 1))))
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85") +
geom_density()
transformed <- replicate(1000, sum(runif(16, -1, 1)))
pos <- data.frame(x=transformed)
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85") +
geom_density()
transformed <- replicate(10000, sum(runif(100, -1, 1)))
signs <- sign(transformed)
transformed <- signs * transformed^2
pos <- data.frame(x=transformed)
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85") +
geom_density()
transformed <- replicate(100000, sum(runif(100, -1, 1)))
signs <- sign(transformed)
transformed <- signs * transformed^2
pos <- data.frame(x=transformed)
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85") +
geom_density()
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85", bins=100) +
geom_density()
pos <- data.frame(x=replicate(1000, sum(runif(16, -1, 1))))
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85", bins=100) +
geom_density()
pos <- data.frame(x=replicate(1000, sum(runif(16, -1, 1))))
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85", bins=30) +
geom_density()
pos <- data.frame(x=replicate(10000, sum(runif(100, -1, 1))))
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85", bins=100) +
geom_density()
transformed <- replicate(100000, sum(runif(100, -1, 1)))
signs <- sign(transformed)
transformed <- signs * transformed^2
pos <- data.frame(x=transformed)
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85", bins=100) +
geom_density()
transformed <- replicate(100000, sum(runif(100, -1, 1)))
signs <- sign(transformed)
transformed <- signs * transformed^2
pos <- data.frame(x=transformed)
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85", bins=100)
pos <- data.frame(x=replicate(1000, sum(runif(16, -1, 1))))
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray50", bins=30) +
geom_density()
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray70", bins=30) +
geom_density()
pos <- data.frame(x=replicate(1000, sum(runif(16, -1, 1))))
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray75", bins=30) +
geom_density()
pos <- data.frame(x=replicate(10000, sum(runif(100, -1, 1))))
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray75", bins=100) +
geom_density()
transformed <- replicate(100000, sum(runif(100, -1, 1)))
signs <- sign(transformed)
transformed <- signs * transformed^2
pos <- data.frame(x=transformed)
ggplot(data=pos, aes(x=x)) +
geom_histogram(aes(y=..density..), fill="gray85", bins=100)
growth <- replicate(10000, prod(1 + runif(12,0,0.1)))
dens(growth, norm.comp=TRUE)
?dens
library(rethinking)
growth <- replicate(10000, prod(1 + runif(12,0,0.1)))
dens(growth, norm.comp=TRUE)
growth <- replicate(10000, prod(1 + runif(12,0,0.1)))
dens(growth, norm.comp=TRUE)
growth <- replicate(10000, prod(1 + runif(12,0,0.5)))
dens(growth, norm.comp=TRUE)
growth <- replicate(10000, prod(1 + runif(12,0,0.6)))
dens(growth, norm.comp=TRUE)
growth <- replicate(10000, prod(1 + runif(12,0,0.8)))
dens(growth, norm.comp=TRUE)
growth <- replicate(10000, prod(1 + runif(12,0,0.5)))
dens(growth, norm.comp=TRUE)
growth <- replicate(10000, prod(1 + runif(12,0,0.1)))
dens(growth, norm.comp=TRUE)
log.big <- replicate(10000, log(prod(1 + runif(12,0,0.5))))
dens(log.big, norm.comp=TRUE)
knitr::opts_chunk$set(echo = TRUE)
